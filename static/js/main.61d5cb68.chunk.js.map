{"version":3,"sources":["components/Wrapper/index.js","components/Header/index.js","components/Card/index.js","App.js","serviceWorker.js","index.js"],"names":["Wrapper","props","react_default","a","createElement","className","children","Header","currentScore","topScore","Card","id","onClick","hasBeenClicked","alt","name","src","image","App","state","cards","clickedCards","_this$state","_this","clickedId","setState","shuffleCards","indexOf","gameOver","push","concat","i","length","j","Math","floor","random","_ref","alert","_this2","this","components_Wrapper","components_Header","map","card","components_Card","key","clicked","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.61d5cb68.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nfunction Wrapper(props) {\n    return <div className=\"wrapper\">{props.children}</div>;\n}\n\nexport default Wrapper;\n","import React from \"react\";\nimport \"./style.css\";\n\n// function Header(props) {\n//     return (\n//         <div>\n//             <h4 className=\"title\">Current Score:{props.currentScore}</h4>\n//             <h4 className=\"title\">Top Score:{props.topScore}</h4>\n//         </div>\n//     )\n// }\n\nconst Header = props => (\n    <nav className=\"navbar\">\n        <ul className=\"nav\">\n            <li className=\"brand\"><h4>Memory Clicky Game</h4></li>\n            <li>Current Score:{props.currentScore}</li>\n            <li>Top Score:{props.topScore}</li>\n        </ul>\n    </nav>\n);\n\nexport default Header;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Card(props) {\n    return (\n        <div className=\"cardContainer\">\n            <div className=\"card\" id={props.id} onClick={() => props.hasBeenClicked(props.id)}>\n                <div className=\"img-container\">\n                    <img alt={props.name} src={props.image} />\n                </div>\n                {/* <div className=\"content\">\n                    <ul>\n                        <li>\n                            <strong>ID:</strong> {props.id}\n                        </li>\n                        <li>\n                            <strong>Name:</strong> {props.name}\n                        </li>\n                    </ul>\n                </div> */}\n            </div>\n        </div>\n    );\n}\n\nexport default Card;\n","import React, { Component } from 'react';\nimport './App.css';\nimport Wrapper from './components/Wrapper'\nimport Header from './components/Header'\n// import Instructions from './components/Instructions'\nimport Card from './components/Card'\nimport cards from \"./cards.json\";\n\nclass App extends Component {\n  // PASSING IN CARDS.JSON\n  state = {\n    cards: cards,\n    currentScore: 0,\n    topScore: 0,\n    clickedCards: []\n  };\n  // CHECK FOR CLICKED VALUE\n  hasBeenClicked = id => {\n    // DECONSTRUCTING THE STATE\n    const { clickedCards, currentScore, topScore } = this.state\n\n    // GETTING CLICKED CARD'S ID\n    let clickedId = id\n\n    // STARTING CURRENT SCORE\n    this.setState({currentScore: currentScore + 1})\n\n    // SHUFFLE CARDS AFTER FIRST CLICK\n    this.shuffleCards()\n\n    // CHECK IF CARD IS IN CLICKED CARDS ARRAY\n    if (clickedCards.indexOf(clickedId) > -1) {\n      // CHECK IF CURRENT SCORE IS GREATER THAN TOP SCORE\n      if (currentScore > topScore) {\n        // IF SO, SET CURRENT SCORE AS TOP SCORE\n        this.setState({topScore: currentScore})\n      }\n      // IF IN CLICKED CARDS ARRAY, RUN GAME OVER!\n      this.gameOver(currentScore, topScore)\n      \n    } else if(currentScore < 12) {\n      // IF NOT IN CLICKED CARDS ARRAY, PUSH CARD TO CLICKED CARDS ARRAY\n      clickedCards.push(id)\n      // CHECK IF CURRENT SCORE IS GREATER THAN TOP SCORE\n      if(currentScore > topScore) {\n        // IF SO, INCREMENT CURRENT SCORE AND SET CURRENT SCORE AS TOP SCORE\n        this.setState({currentScore: currentScore + 1})\n        this.setState({ topScore: currentScore})\n      }\n      \n      // RUN SHUFFLE CARDS\n      this.shuffleCards()\n    }\n  };\n\n  // SHUFFLE CARDS WITH FISHER-YATES ALGO\n  shuffleCards = ()=> {\n    const cards = [].concat(this.state.cards)\n    for (let i = cards.length - 1; i > 0; i--) {\n      let j = Math.floor(Math.random() * (i + 1));\n      [cards[i], cards[j]] = [cards[j], cards[i]];\n    }\n    this.setState({ cards });\n  }\n\n  // GAME OVER\n  gameOver = (currentScore, topScore)=> {\n    // ALERT GAME OVER WITH CURRENT SCORE AND TOP SCORE\n    // CHECK IF CURRENT SCORE IS GREATER THAN TOP SCORE\n    if(currentScore > 11) {\n      alert(`Game won! Current Score: ${currentScore} Top Score: ${topScore}`)\n    } else if(currentScore > topScore) {\n      alert(`Got a better score than last round. Current Score: ${currentScore} Top Score: ${topScore}`)\n    } else {\n      alert(`Oh, you gotta do better than that! Current Score: ${currentScore} Top Score: ${topScore}`)\n    }\n    this.setState({\n      // SET CURRENT SCORE TO 0 AND CLEAR OUT THE CLICKED CARDS ARRAY\n      currentScore: 0,\n      clickedCards: []\n    })\n  }\n\n  render() {\n    return (\n      <Wrapper>\n        <Header \n          currentScore={this.state.currentScore}\n          topScore={this.state.topScore}\n        />\n        {this.state.cards.map(card => (\n          <Card\n            hasBeenClicked={this.hasBeenClicked}\n            id={card.id}\n            key={card.id}\n            name={card.name}\n            image={card.image}\n            clicked={card.clicked}\n          />\n        ))}\n      </Wrapper>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}